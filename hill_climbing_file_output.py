import time
import os
from light_up import LightUpPuzzle
from hill_climbing_variants import hill_climbing_deterministic, hill_climbing_random

# PrzykÅ‚adowa siatka Å‚amigÅ‚Ã³wki Light Up
example_grid = [
    [-1, -1, -1, -1, -1, -1, -1],
    [-1, -2, -1, -2, -1, -2, -1],
    [-1, -1, -1, -1, -1, -1, -1],
    [-1, -2, -1, -2, -1, -2, -1],
    [-1, -1, -1, -1, -1, -1, -1],
    [-1, -2, -1, -2, -1, -2, -1],
    [-1, -1, -1, -1, -1, -1, -1]
]

# ÅšcieÅ¼ka do pliku wynikowego
output_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), "hill_climbing_results.txt")

def write_to_file(text):
    """Zapisuje tekst do pliku wynikowego."""
    with open(output_file, "a") as f:
        f.write(text + "\n")

def main():
    # UsuÅ„ plik wynikowy, jeÅ›li istnieje
    if os.path.exists(output_file):
        os.remove(output_file)
    
    # Inicjalizacja Å‚amigÅ‚Ã³wki
    puzzle = LightUpPuzzle(example_grid)

    # Wygeneruj losowe poczÄ…tkowe rozwiÄ…zanie
    initial_solution = puzzle.random_solution()
    write_to_file("\nPoczÄ…tkowe losowe rozwiÄ…zanie:")
    # Zapisz rozwiÄ…zanie jako tekst
    solution_text = puzzle.get_solution_text(initial_solution)
    write_to_file(solution_text)
    initial_score = puzzle.objective_function(initial_solution)
    write_to_file(f"Wynik poczÄ…tkowego rozwiÄ…zania: {initial_score}")

    # Uruchom algorytm wspinaczkowy z deterministycznym wyborem sÄ…siada
    write_to_file("\n\nAlgorytm wspinaczkowy z deterministycznym wyborem sÄ…siada:")
    start_time = time.time()
    solution_deterministic = hill_climbing_deterministic(
        initial_solution=initial_solution,
        objective_function=puzzle.objective_function,
        get_neighbors=lambda sol: puzzle.get_neighbors(sol),
        verbose=False  # WyÅ‚Ä…cz wyÅ›wietlanie postÄ™pÃ³w
    )
    det_time = time.time() - start_time

    write_to_file("\nRozwiÄ…zanie znalezione przez algorytm deterministyczny:")
    solution_text = puzzle.get_solution_text(solution_deterministic)
    write_to_file(solution_text)
    det_score = puzzle.objective_function(solution_deterministic)
    write_to_file(f"Wynik: {det_score}")
    write_to_file(f"Czas wykonania: {det_time:.2f} sekund")
    write_to_file(f"Czy rozwiÄ…zanie jest poprawne: {puzzle.is_valid_solution(solution_deterministic)}")

    # Uruchom algorytm wspinaczkowy z losowym wyborem sÄ…siada
    write_to_file("\n\nAlgorytm wspinaczkowy z losowym wyborem sÄ…siada:")
    start_time = time.time()
    solution_random = hill_climbing_random(
        initial_solution=initial_solution,
        objective_function=puzzle.objective_function,
        get_neighbors=lambda sol: puzzle.get_neighbors(sol),
        verbose=False  # WyÅ‚Ä…cz wyÅ›wietlanie postÄ™pÃ³w
    )
    random_time = time.time() - start_time

    write_to_file("\nRozwiÄ…zanie znalezione przez algorytm z losowym wyborem:")
    solution_text = puzzle.get_solution_text(solution_random)
    write_to_file(solution_text)
    random_score = puzzle.objective_function(solution_random)
    write_to_file(f"Wynik: {random_score}")
    write_to_file(f"Czas wykonania: {random_time:.2f} sekund")
    write_to_file(f"Czy rozwiÄ…zanie jest poprawne: {puzzle.is_valid_solution(solution_random)}")

    # PorÃ³wnanie wynikÃ³w
    write_to_file("\n\nPorÃ³wnanie wynikÃ³w:")
    write_to_file(f"Algorytm deterministyczny: wynik = {det_score}, czas = {det_time:.2f} s")
    write_to_file(f"Algorytm z losowym wyborem: wynik = {random_score}, czas = {random_time:.2f} s")

    if det_score < random_score:
        write_to_file("Algorytm deterministyczny znalazÅ‚ lepsze rozwiÄ…zanie.")
    elif random_score < det_score:
        write_to_file("Algorytm z losowym wyborem znalazÅ‚ lepsze rozwiÄ…zanie.")
    else:
        write_to_file("Oba algorytmy znalazÅ‚y rozwiÄ…zania o tym samym wyniku.")
    
    print(f"Wyniki zostaÅ‚y zapisane do pliku: {output_file}")

# Dodaj metodÄ™ do klasy LightUpPuzzle, ktÃ³ra zwraca rozwiÄ…zanie jako tekst
def get_solution_text(self, solution):
    """Zwraca rozwiÄ…zanie jako tekst."""
    grid_text = ""
    for i in range(len(self.grid)):
        row = ""
        for j in range(len(self.grid[0])):
            cell = (i, j)
            if cell in solution:
                row += "ðŸ’¡ "
            elif self.grid[i][j] == -2:
                row += "â–  "
            elif self.grid[i][j] >= 0:
                row += f"{self.grid[i][j]} "
            else:
                row += "-1 "
        grid_text += row.strip() + "\n"
    return grid_text

# Dodaj metodÄ™ do klasy LightUpPuzzle
LightUpPuzzle.get_solution_text = get_solution_text

# Uruchom gÅ‚Ã³wnÄ… funkcjÄ™
if __name__ == "__main__":
    main()
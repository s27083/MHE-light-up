import os
import sys
import numpy as np
from light_up import LightUpPuzzle

# PrzykÅ‚adowa siatka Å‚amigÅ‚Ã³wki Light Up
example_grid = [
    [-1, -1, -1, -1, -1, -1, -1],
    [-1, -2, -1, -2, -1, -2, -1],
    [-1, -1, -1, -1, -1, -1, -1],
    [-1, -2, -1, -2, -1, -2, -1],
    [-1, -1, -1, -1, -1, -1, -1],
    [-1, -2, -1, -2, -1, -2, -1],
    [-1, -1, -1, -1, -1, -1, -1]
]

# Bardziej zÅ‚oÅ¼ona siatka z ograniczeniami liczbowymi
complex_grid = [
    [-1, -1, -1, -1, -1, -1, -1],
    [-1, 2, -1, -2, -1, 1, -1],
    [-1, -1, -1, -1, -1, -1, -1],
    [-1, -2, -1, 0, -1, -2, -1],
    [-1, -1, -1, -1, -1, -1, -1],
    [-1, 1, -1, -2, -1, 3, -1],
    [-1, -1, -1, -1, -1, -1, -1]
]

def get_illuminated_cells_manual(puzzle, solution):
    """
    RÄ™czna implementacja metody do znajdowania oÅ›wietlonych pÃ³l.
    """
    height, width = puzzle.grid.shape
    illuminated = set(solution)  # Å»arÃ³wki sÄ… oÅ›wietlone
    
    # Dla kaÅ¼dej Å¼arÃ³wki, znajdÅº pola, ktÃ³re oÅ›wietla
    for i, j in solution:
        # GÃ³ra
        r = i - 1
        while r >= 0 and puzzle.grid[r, j] == -1:
            illuminated.add((r, j))
            r -= 1
        
        # DÃ³Å‚
        r = i + 1
        while r < height and puzzle.grid[r, j] == -1:
            illuminated.add((r, j))
            r += 1
        
        # Lewo
        c = j - 1
        while c >= 0 and puzzle.grid[i, c] == -1:
            illuminated.add((i, c))
            c -= 1
        
        # Prawo
        c = j + 1
        while c < width and puzzle.grid[i, c] == -1:
            illuminated.add((i, c))
            c += 1
    
    return illuminated

def display_solution(puzzle, solution):
    """
    WyÅ›wietla rozwiÄ…zanie Å‚amigÅ‚Ã³wki Light Up w czytelnej formie.
    
    Legenda:
    - ðŸ’¡: Å»arÃ³wka
    - â– : Czarne pole bez numeru
    - 0-4: Czarne pole z ograniczeniem liczbowym
    - â–¡: NieoÅ›wietlone biaÅ‚e pole
    - âœ“: OÅ›wietlone biaÅ‚e pole
    """
    # Pobierz wszystkie oÅ›wietlone pola
    illuminated = get_illuminated_cells_manual(puzzle, solution)
    
    # UsuÅ„ Å¼arÃ³wki z listy oÅ›wietlonych pÃ³l dla lepszej wizualizacji
    illuminated_without_bulbs = illuminated - set(solution)
    
    # WyÅ›wietl informacje o liczbie pÃ³l
    print(f"Liczba Å¼arÃ³wek: {len(solution)}")
    print(f"Liczba wszystkich oÅ›wietlonych pÃ³l: {len(illuminated)}")
    print(f"Liczba oÅ›wietlonych biaÅ‚ych pÃ³l (bez Å¼arÃ³wek): {len(illuminated_without_bulbs)}")
    
    # WyÅ›wietl siatkÄ™
    height, width = puzzle.grid.shape
    grid_text = ""
    for i in range(height):
        row = ""
        for j in range(width):
            cell = (i, j)
            if cell in solution:
                row += "ðŸ’¡ "  # Å»arÃ³wka
            elif puzzle.grid[i, j] == -2:
                row += "â–  "  # Czarne pole bez numeru
            elif puzzle.grid[i, j] >= 0:
                # Czarne pole z ograniczeniem liczbowym
                row += f"{puzzle.grid[i, j]} "
            elif cell in illuminated_without_bulbs:
                row += "âœ“ "  # OÅ›wietlone biaÅ‚e pole
            else:
                row += "â–¡ "  # NieoÅ›wietlone biaÅ‚e pole
        grid_text += row.strip() + "\n"
    print(grid_text)

def main():
    # WyczyÅ›Ä‡ konsolÄ™
    os.system('clear')
    
    # WyÅ‚Ä…cz buforowanie wyjÅ›cia
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 1)
    
    # Inicjalizacja Å‚amigÅ‚Ã³wki z prostÄ… siatkÄ…
    puzzle = LightUpPuzzle(example_grid)
    
    # Wygeneruj losowe poczÄ…tkowe rozwiÄ…zanie
    initial_solution = puzzle.random_solution()
    
    print("PrzykÅ‚ad prostej siatki:")
    print("\nPoczÄ…tkowe losowe rozwiÄ…zanie (nowy format):")
    display_solution(puzzle, initial_solution)
    
    # Inicjalizacja Å‚amigÅ‚Ã³wki ze zÅ‚oÅ¼onÄ… siatkÄ…
    complex_puzzle = LightUpPuzzle(complex_grid)
    
    # Wygeneruj losowe poczÄ…tkowe rozwiÄ…zanie
    complex_solution = complex_puzzle.random_solution()
    
    print("\nPrzykÅ‚ad zÅ‚oÅ¼onej siatki z ograniczeniami liczbowymi:")
    print("\nPoczÄ…tkowe losowe rozwiÄ…zanie (nowy format):")
    display_solution(complex_puzzle, complex_solution)
    
    print("\nLegenda:")
    print("ðŸ’¡: Å»arÃ³wka")
    print("â– : Czarne pole bez numeru")
    print("0-4: Czarne pole z ograniczeniem liczbowym")
    print("â–¡: NieoÅ›wietlone biaÅ‚e pole")
    print("âœ“: OÅ›wietlone biaÅ‚e pole")

if __name__ == "__main__":
    main()